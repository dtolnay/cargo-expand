name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule: [cron: "40 1 * * *"]

permissions:
  contents: read

env:
  RUSTFLAGS: -Dwarnings

jobs:
  pre_ci:
    uses: dtolnay/.github/.github/workflows/pre_ci.yml@master

  test:
    name: ${{matrix.name || format('Rust {0}', matrix.rust)}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ${{matrix.os}}-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly, beta, stable, 1.86.0]
        os: [ubuntu]
        include:
          - name: macOS
            os: macos
            rust: nightly
          - name: Windows (gnu)
            os: windows
            rust: nightly-x86_64-pc-windows-gnu
          - name: Windows (msvc)
            os: windows
            rust: nightly-x86_64-pc-windows-msvc
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
        shell: bash
      - name: Ignore Windows linker warning
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Alinker_messages >> $GITHUB_ENV
        if: matrix.rust == 'nightly-x86_64-pc-windows-gnu'
        shell: bash
      - run: cargo check --locked
      - run: cargo update
      - run: cargo check
      - run: cargo test
        if: matrix.os == 'ubuntu' && matrix.rust == 'nightly'
      - run: cargo run -- expand --manifest-path tests/Cargo.toml > expand.rs && diff tests/lib.expand.rs expand.rs
        if: startsWith(matrix.rust, 'nightly')
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu' && matrix.rust == 'nightly' && always()
        with:
          name: Cargo.lock
          path: Cargo.lock
        continue-on-error: true

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@clippy
      - run: cargo clippy --tests -- -Dclippy::all -Dclippy::pedantic

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/install@cargo-outdated
      - run: cargo tree --package bat --depth 0 | grep "^bat v$(cat src/bat.version)$"
      - run: cargo update
      - run: cargo outdated --workspace --exit-code 1
